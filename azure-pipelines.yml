trigger:
  branches:
    include:
      - main

variables:
  imageName: 'spring-petclinic'
  acrLoginServer: 'sudhavetclinic01.azurecr.io'  # replace with your ACR login server

stages:
- stage: BuildAndPush
  displayName: 'Build, Analyze, and Push Docker Image to ACR'
  jobs:
  - job: Build
    displayName: 'CI Pipeline'
    pool:
      vmImage: 'ubuntu-latest'

    steps:
    - checkout: self

    - task: Maven@3
      inputs:
        mavenPomFile: 'pom.xml'
        goals: 'clean package'

    - task: SonarQubePrepare@5
      inputs:
        SonarQube: 'SonarQubeServiceConnection'
        scannerMode: 'CLI'
        configMode: 'manual'
        cliProjectKey: 'spring-petclinic'
        cliProjectName: 'Spring PetClinic'
        extraProperties: |
          sonar.java.binaries=target/classes

    - script: mvn sonar:sonar
      displayName: 'Run SonarQube Analysis'

    - task: Docker@2
      displayName: 'Build Docker Image'
      inputs:
        containerRegistry: 'azureconnection'  # Azure DevOps service connection to ACR
        repository: '$(imageName)'
        command: 'buildAndPush'
        Dockerfile: '**/Dockerfile'
        tags: |
          latest
          $(Build.BuildId)
- stage: Deploy
  displayName: 'Deploy to AKS'
  dependsOn: BuildAndPush
  jobs:
  - deployment: DeployApp
    displayName: 'Deploy to AKS Cluster'
    environment: 'dev'
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self

          - task: AzureCLI@2
            inputs:
              azureSubscription: 'azureconnection'  # Azure service connection
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az aks get-credentials \
                  --resource-group petclinic-rg-dev \
                  --name petclinic-aks-dev \
                  --overwrite-existing

                kubectl apply -f k8s/deployment.yaml
                kubectl apply -f k8s/service.yaml

